# Form implementation generated from reading ui file 'WorkWinPattern.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from GraphWindow import Ui_DrawPattern
import pyqtgraph as pg
import elemoperations
import conjunction
import disjunction
import substraction


def binarySearch(alist, item):
    midpoint = len(alist) // 2
    if alist[midpoint][0] == item:
        return alist[midpoint][1]
    else:
        if item < alist[midpoint][0]:
            return binarySearch(alist[:midpoint], item)
        return binarySearch(alist[midpoint + 1:], item)


# проверка перед закидыванием в функцию правильно ли расставлены скобки и знаки
# -на все открвающиеся "(" есть ")"
# -знаки не могут стоять перед ")" и перед друг другом

class Ui_Pattern(object):
    def __init__(self, path, tab):
        super().__init__()
        self.tabWidget = tab
        self.DS = []
        self.L = []
        self.P = []
        self.bounds = []
        self.flag = 0
        self.counter = 0

        self.colors = {0: (255, 0, 0), 1: (255, 255, 0), 2: (255, 0, 255), 3: (0, 255, 0), 4: (0, 255, 255),
                       5: (0, 0, 255), 6: (100, 0, 0), 7: (0, 100, 0), 8: (0, 0, 100), 9: (100, 100, 0),
                       10: (100, 0, 100), 11: (0, 100, 100), 12: (100, 100, 100)}
        self.count = 0

        self.text_row_counter = -1
        self.options_row_counter = 1

        self.path = path

        self.list_rows_update = []
        self.list_indexes_update = []

    def setupUi(self, Pattern):
        Pattern.setObjectName("Pattern")
        Pattern.resize(895, 516)
        # self.path = path
        self.gridLayout = QtWidgets.QGridLayout(Pattern)
        self.gridLayout.setObjectName("gridLayout")

        spacerItem = QtWidgets.QSpacerItem(32, 20, QtWidgets.QSizePolicy.Policy.Fixed,
                                           QtWidgets.QSizePolicy.Policy.Minimum)
        self.gridLayout.addItem(spacerItem, 3, 2, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(288, 20, QtWidgets.QSizePolicy.Policy.Expanding,
                                            QtWidgets.QSizePolicy.Policy.Minimum)
        self.gridLayout.addItem(spacerItem1, 3, 3, 1, 1)
        spacerItem2 = QtWidgets.QSpacerItem(32, 20, QtWidgets.QSizePolicy.Policy.Fixed,
                                            QtWidgets.QSizePolicy.Policy.Minimum)
        self.gridLayout.addItem(spacerItem2, 3, 0, 1, 1)

        self.textBox = QtWidgets.QPlainTextEdit(parent=Pattern)
        self.textBox.setObjectName("textBox")
        self.textBox.setLineWrapMode(QtWidgets.QPlainTextEdit.LineWrapMode.NoWrap)
        self.gridLayout.addWidget(self.textBox, 0, 3, 2, 3)

        self.treeView = QtWidgets.QTreeView(parent=Pattern)
        self.treeView.setMaximumSize(QtCore.QSize(150, 16777215))
        self.treeView.setObjectName("treeView")
        self.treeView.setHeaderHidden(True)
        self.treeView.setSelectionMode(self.treeView.selectionMode().ExtendedSelection)
        self.treeModel = QtGui.QStandardItemModel()
        self.rootNode = self.treeModel.invisibleRootItem()
        self.treeView.setModel(self.treeModel)
        self.gridLayout.addWidget(self.treeView, 0, 0, 3, 3)

        spacerItem3 = QtWidgets.QSpacerItem(287, 20, QtWidgets.QSizePolicy.Policy.Expanding,
                                            QtWidgets.QSizePolicy.Policy.Minimum)
        self.gridLayout.addItem(spacerItem3, 3, 5, 1, 1)

        self.frame = QtWidgets.QFrame(parent=Pattern)
        self.frame.setMinimumSize(QtCore.QSize(100, 100))
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_2.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_2.setSpacing(3)
        self.gridLayout_2.setObjectName("gridLayout_2")

        self.treeViewOptions = pg.TreeWidget(parent=self.frame)
        self.treeViewOptions.setColumnCount(8)
        self.treeViewOptions.setObjectName("treeViewOptions")
        # self.treeOptionsModel = QtGui.QStandardItemModel()
        self.treeViewOptions.setHeaderLabels(["Item", "Line color", "Line width", "Fill color",
                                            "Transparency", "Fill Style", "Background", " "])
        # self.rootOptionsNode = self.treeOptionsModel.invisibleRootItem()
        # self.treeViewOptions.setModel(self.treeOptionsModel)
        self.gridLayout_2.addWidget(self.treeViewOptions, 0, 0, 1, 1)
        self.gridLayout.addWidget(self.frame, 2, 3, 1, 3)

        self.inputExpressionButton = QtWidgets.QPushButton(parent=Pattern)
        self.inputExpressionButton.setObjectName("inputExpressionButton")
        self.gridLayout.addWidget(self.inputExpressionButton, 3, 4, 1, 1)

        self.pushFocusedButton = QtWidgets.QPushButton(parent=Pattern)
        self.pushFocusedButton.setObjectName("pushFocusedButton")
        self.gridLayout.addWidget(self.pushFocusedButton, 3, 1, 1, 1)

        self.inputExpressionButton.clicked.connect(lambda: self.input_expressions(self.textBox.toPlainText()))
        self.pushFocusedButton.clicked.connect(lambda: self.get_selection())
        self.treeView.doubleClicked.connect(lambda: self.get_selection())

        self.retranslateUi(Pattern)
        QtCore.QMetaObject.connectSlotsByName(Pattern)

    def retranslateUi(self, Pattern):
        _translate = QtCore.QCoreApplication.translate
        Pattern.setWindowTitle(_translate("Pattern", "Form"))
        self.pushFocusedButton.setText(_translate("Pattern", "Выбрать"))
        self.inputExpressionButton.setText(_translate("Pattern", "Ввод"))
        self.textBox.keyPressEvent = self.key_pressed_event

    # ________________________________________________________________________________________
    def option_update(self, key):
        flag = 1

        if key == 16777220:
            # print(self.textBox.textCursor().block().position())
            if len(self.textBox.textCursor().block().text()) > 0 and self.textBox.textCursor().blockNumber() not in self.list_rows_update:
                # print("enter")
                self.text_row_counter += 1
                if len(self.textBox.textCursor().block().text()) > 7:
                    row = QtWidgets.QTreeWidgetItem([self.textBox.textCursor().block().text()[:7] + "..."])
                else:
                    row = QtWidgets.QTreeWidgetItem([self.textBox.textCursor().block().text()])
                self.treeViewOptions.addTopLevelItem(row)
                try:
                    fill_color = pg.ColorButton(color=self.colors[self.text_row_counter])
                except KeyError:
                    fill_color = pg.ColorButton(color=(255, 255, 255))
                transparancy = QtWidgets.QSpinBox()
                transparancy.setValue(90)
                transparancy.setMinimum(0)
                transparancy.setMaximum(255)
                style = QtWidgets.QComboBox()
                for i in range(1, 12):
                    style.addItem(QtGui.QIcon("pics/" + str(i) + ".png"), str(i))

                self.treeViewOptions.setItemWidget(row, 3, fill_color)
                self.treeViewOptions.setItemWidget(row, 4, transparancy)
                self.treeViewOptions.setItemWidget(row, 5, style)


                self.list_rows_update.append(self.textBox.textCursor().blockNumber())
                self.list_indexes_update.append(self.options_row_counter)
                self.options_row_counter += 1

            elif self.textBox.textCursor().atBlockStart():
                cursor_num = self.textBox.textCursor().blockNumber()
                for i in range(0, len(self.list_rows_update)):
                    if cursor_num <= self.list_rows_update[i]:
                        self.list_rows_update[i] += 1

            if self.textBox.textCursor().blockNumber() in self.list_rows_update:
                cursor_num = self.textBox.textCursor().blockNumber()
                for i in range(0, len(self.list_rows_update)):
                    if cursor_num < self.list_rows_update[i]:
                        self.list_rows_update[i] += 1

        elif key == 16777219:
            if len(self.textBox.textCursor().block().text()) == 0 and self.textBox.textCursor().atBlockStart():
                cursor_num = self.textBox.textCursor().blockNumber()
                # print(cursor_num)
                i = 0
                if cursor_num != 0:
                    while i < len(self.list_rows_update):
                        if cursor_num < self.list_rows_update[i]:
                            self.list_rows_update[i] -= 1
                        elif cursor_num == self.list_rows_update[i]:
                            # print("pop")
                            self.treeViewOptions.takeTopLevelItem(self.list_indexes_update[i])
                            self.list_indexes_update.pop(i)
                            self.list_rows_update.pop(i)
                            self.text_row_counter -= 1
                            self.options_row_counter -= 1
                            i -= 1
                            for i in range(0, len(self.list_indexes_update)):
                                if cursor_num < self.list_rows_update[i]:
                                    self.list_indexes_update[i] -= 1
                                    self.list_rows_update[i] -= 1
                        i += 1
                else:
                    while i < len(self.list_rows_update):
                        if cursor_num == self.list_rows_update[i]:
                            # print("pop")
                            self.treeViewOptions.takeTopLevelItem(self.list_indexes_update[i])
                            self.list_indexes_update.pop(i)
                            self.list_rows_update.pop(i)
                            self.text_row_counter -= 1
                            self.options_row_counter -= 1
                            i -= 1
                            for i in range(0, len(self.list_indexes_update)):
                                self.list_indexes_update[i] -= 1

                        i += 1
            elif self.textBox.textCursor().atBlockStart():
                flag = 0
        # print(self.list_indexes_update, self.list_rows_update, self.text_row_counter, self.options_row_counter)

        return flag

    def key_pressed_event(self, e):
        flag = 1
        # print(e)
        if e.key() == 16777220:
            flag = self.option_update(16777220)
        elif e.key() == 16777219:
            flag = self.option_update(16777219)
        if flag:
            QtWidgets.QPlainTextEdit.keyPressEvent(self.textBox, e)

    def option_default_filling(self):

        _all = QtWidgets.QTreeWidgetItem(["ALL"])
        kn = QtWidgets.QTreeWidgetItem(["KN"])
        kp = QtWidgets.QTreeWidgetItem(["KP"])
        n = QtWidgets.QTreeWidgetItem(["N"])
        p = QtWidgets.QTreeWidgetItem(["P"])
        na = QtWidgets.QTreeWidgetItem(["NA"])
        pa = QtWidgets.QTreeWidgetItem(["PA"])
        sn = QtWidgets.QTreeWidgetItem(["SN"])
        sp = QtWidgets.QTreeWidgetItem(["SP"])
        si = QtWidgets.QTreeWidgetItem(["SI"])
        m1 = QtWidgets.QTreeWidgetItem(["M1"])
        m2 = QtWidgets.QTreeWidgetItem(["M2"])
        m3 = QtWidgets.QTreeWidgetItem(["M3"])
        cpa = QtWidgets.QTreeWidgetItem(["СPA"])
        cna = QtWidgets.QTreeWidgetItem(["СNA"])
        cm1 = QtWidgets.QTreeWidgetItem(["СM1"])
        cm2 = QtWidgets.QTreeWidgetItem(["СM2"])
        cm3 = QtWidgets.QTreeWidgetItem(["СM3"])
        csi = QtWidgets.QTreeWidgetItem(["СSI"])
        cne = QtWidgets.QTreeWidgetItem(["СNE"])
        cnk = QtWidgets.QTreeWidgetItem(["СNK"])
        cpe = QtWidgets.QTreeWidgetItem(["СPE"])
        cpk = QtWidgets.QTreeWidgetItem(["СPK"])



        # может отдельно нужно добавлять каждый


        background_color = pg.ColorButton(color=(255, 255, 255))

        line_color_kn = pg.ColorButton(color=(157, 71, 0))
        line_width_kn = QtWidgets.QSpinBox()
        line_width_kn.setMinimum(0)
        line_width_kn.setValue(3)
        fill_color_kn = pg.ColorButton(color=(195, 88, 0))
        transparancy_kn = QtWidgets.QSpinBox()
        transparancy_kn.setMinimum(0)
        transparancy_kn.setMaximum(255)
        transparancy_kn.setValue(200)
        style_kn = QtWidgets.QComboBox()
        for i in range(1, 12):
            style_kn.addItem(QtGui.QIcon("pics/"+str(i)+".png"), str(i))
        style_kn.setCurrentIndex(9)

        line_color_kp = pg.ColorButton(color=(0, 91, 0))
        line_width_kp = QtWidgets.QSpinBox()
        line_width_kp.setMinimum(0)
        line_width_kp.setValue(3)
        fill_color_kp = pg.ColorButton(color=(0, 140, 0))
        transparancy_kp = QtWidgets.QSpinBox()
        transparancy_kp.setMinimum(0)
        transparancy_kp.setMaximum(255)
        transparancy_kp.setValue(200)
        style_kp = QtWidgets.QComboBox()
        for i in range(1, 12):
            style_kp.addItem(QtGui.QIcon("pics/" + str(i) + ".png"), str(i))
        style_kp.setCurrentIndex(9)

        line_color_n = pg.ColorButton(color=(0, 60, 77))
        line_width_n = QtWidgets.QSpinBox()
        line_width_n.setMinimum(0)
        line_width_n.setValue(3)
        fill_color_n = pg.ColorButton(color=(0, 99, 127))
        transparancy_n = QtWidgets.QSpinBox()
        transparancy_n.setMinimum(0)
        transparancy_n.setMaximum(255)
        # transparancy_n.setValue(200)
        style_n = QtWidgets.QComboBox()
        for i in range(1, 12):
            style_n.addItem(QtGui.QIcon("pics/" + str(i) + ".png"), str(i))

        line_color_p = pg.ColorButton(color=(95, 39, 17))
        line_width_p = QtWidgets.QSpinBox()
        line_width_p.setMinimum(0)
        line_width_p.setValue(3)
        fill_color_p = pg.ColorButton(color=(120, 49, 21))
        transparancy_p = QtWidgets.QSpinBox()
        transparancy_p.setMinimum(0)
        transparancy_p.setMaximum(255)
        # transparancy_p.setValue(200)
        style_p = QtWidgets.QComboBox()
        for i in range(1, 12):
            style_p.addItem(QtGui.QIcon("pics/" + str(i) + ".png"), str(i))

        line_color_na = pg.ColorButton(color=(0, 0, 255))
        line_width_na = QtWidgets.QSpinBox()
        line_width_na.setMinimum(0)
        line_width_na.setValue(10)
        fill_color_na = pg.ColorButton(color=(0, 0, 255))
        transparancy_na = QtWidgets.QSpinBox()
        transparancy_na.setMinimum(0)
        transparancy_na.setMaximum(255)
        transparancy_na.setValue(200)
        style_na = QtWidgets.QComboBox()
        for i in range(1, 12):
            style_na.addItem(QtGui.QIcon("pics/" + str(i) + ".png"), str(i))
        style_na.setCurrentIndex(8)
        style_na.setCurrentIndex(10)

        line_color_pa = pg.ColorButton(color=(255, 0, 0))
        line_width_pa = QtWidgets.QSpinBox()
        line_width_pa.setMinimum(0)
        line_width_pa.setValue(10)
        fill_color_pa = pg.ColorButton(color=(255, 0, 0))
        transparancy_pa = QtWidgets.QSpinBox()
        transparancy_pa.setMinimum(0)
        transparancy_pa.setMaximum(255)
        transparancy_pa.setValue(200)
        style_pa = QtWidgets.QComboBox()
        for i in range(1, 12):
            style_pa.addItem(QtGui.QIcon("pics/" + str(i) + ".png"), str(i))
        style_pa.setCurrentIndex(8)
        style_pa.setCurrentIndex(10)

        line_color_sn = pg.ColorButton(color=(0, 255, 190))
        line_width_sn = QtWidgets.QSpinBox()
        line_width_sn.setMinimum(0)
        line_width_sn.setValue(10)
        fill_color_sn = pg.ColorButton(color=(0, 255, 190))
        transparancy_sn = QtWidgets.QSpinBox()
        transparancy_sn.setMinimum(0)
        transparancy_sn.setMaximum(255)
        style_sn = QtWidgets.QComboBox()
        for i in range(1, 12):
            style_sn.addItem(QtGui.QIcon("pics/" + str(i) + ".png"), str(i))

        line_color_sp = pg.ColorButton(color=(0, 255, 0))
        line_width_sp = QtWidgets.QSpinBox()
        line_width_sp.setMinimum(0)
        line_width_sp.setValue(10)
        fill_color_sp = pg.ColorButton(color=(0, 255, 0))
        transparancy_sp = QtWidgets.QSpinBox()
        transparancy_sp.setMinimum(0)
        transparancy_sp.setMaximum(255)
        style_sp = QtWidgets.QComboBox()
        for i in range(1, 12):
            style_sp.addItem(QtGui.QIcon("pics/" + str(i) + ".png"), str(i))

        line_color_si = pg.ColorButton(color=(0, 140, 0))
        line_width_si = QtWidgets.QSpinBox()
        line_width_si.setMinimum(0)
        line_width_si.setValue(10)
        fill_color_si = pg.ColorButton(color=(0, 140, 0))
        transparancy_si = QtWidgets.QSpinBox()
        transparancy_si.setMinimum(0)
        transparancy_si.setMaximum(255)
        style_si = QtWidgets.QComboBox()
        for i in range(1, 12):
            style_si.addItem(QtGui.QIcon("pics/" + str(i) + ".png"), str(i))

        line_color_m1 = pg.ColorButton(color=(255, 255, 0))
        line_width_m1 = QtWidgets.QSpinBox()
        line_width_m1.setMinimum(0)
        line_width_m1.setValue(10)
        fill_color_m1 = pg.ColorButton(color=(255, 255, 0))
        transparancy_m1 = QtWidgets.QSpinBox()
        transparancy_m1.setMinimum(0)
        transparancy_m1.setMaximum(255)
        style_m1 = QtWidgets.QComboBox()
        for i in range(1, 12):
            style_m1.addItem(QtGui.QIcon("pics/" + str(i) + ".png"), str(i))

        line_color_m2 = pg.ColorButton(color=(0, 255, 255))
        line_width_m2 = QtWidgets.QSpinBox()
        line_width_m2.setMinimum(0)
        line_width_m2.setValue(10)
        fill_color_m2 = pg.ColorButton(color=(0, 255, 255))
        transparancy_m2 = QtWidgets.QSpinBox()
        transparancy_m2.setMinimum(0)
        transparancy_m2.setMaximum(255)
        style_m2 = QtWidgets.QComboBox()
        for i in range(1, 12):
            style_m2.addItem(QtGui.QIcon("pics/" + str(i) + ".png"), str(i))

        line_color_m3 = pg.ColorButton(color=(255, 0, 255))
        line_width_m3 = QtWidgets.QSpinBox()
        line_width_m3.setMinimum(0)
        line_width_m3.setValue(10)
        fill_color_m3 = pg.ColorButton(color=(255, 0, 255))
        transparancy_m3 = QtWidgets.QSpinBox()
        transparancy_m3.setMinimum(0)
        transparancy_m3.setMaximum(255)
        style_m3 = QtWidgets.QComboBox()
        for i in range(1, 12):
            style_m3.addItem(QtGui.QIcon("pics/" + str(i) + ".png"), str(i))

        line_color_cpa = pg.ColorButton(color=(195, 0, 0))
        line_width_cpa = QtWidgets.QSpinBox()
        line_width_cpa.setMinimum(0)
        line_width_cpa.setValue(10)
        fill_color_cpa = pg.ColorButton(color=(195, 0, 0))
        transparancy_cpa = QtWidgets.QSpinBox()
        transparancy_cpa.setMinimum(0)
        transparancy_cpa.setMaximum(255)
        transparancy_cpa.setValue(200)
        style_cpa = QtWidgets.QComboBox()
        for i in range(1, 12):
            style_cpa.addItem(QtGui.QIcon("pics/" + str(i) + ".png"), str(i))
        style_cpa.setCurrentIndex(7)

#____________________________________________________________

        line_color_cna = pg.ColorButton(color=(0, 0, 195))
        line_width_cna = QtWidgets.QSpinBox()
        line_width_cna.setMinimum(0)
        line_width_cna.setValue(10)
        fill_color_cna = pg.ColorButton(color=(0, 0, 195))
        transparancy_cna = QtWidgets.QSpinBox()
        transparancy_cna.setMinimum(0)
        transparancy_cna.setMaximum(255)
        transparancy_cna.setValue(200)
        style_cna = QtWidgets.QComboBox()
        for i in range(1, 12):
            style_cna.addItem(QtGui.QIcon("pics/" + str(i) + ".png"), str(i))
        style_cna.setCurrentIndex(7)


        line_color_cm1 = pg.ColorButton(color=(195, 195, 0))
        line_width_cm1 = QtWidgets.QSpinBox()
        line_width_cm1.setMinimum(0)
        line_width_cm1.setValue(10)
        fill_color_cm1 = pg.ColorButton(color=(195, 195, 0))
        transparancy_cm1 = QtWidgets.QSpinBox()
        transparancy_cm1.setMinimum(0)
        transparancy_cm1.setMaximum(255)
        transparancy_cm1.setValue(200)
        style_cm1 = QtWidgets.QComboBox()
        for i in range(1, 12):
            style_cm1.addItem(QtGui.QIcon("pics/" + str(i) + ".png"), str(i))
        style_cm1.setCurrentIndex(7)

        line_color_cm2 = pg.ColorButton(color=(0, 195, 195))
        line_width_cm2 = QtWidgets.QSpinBox()
        line_width_cm2.setMinimum(0)
        line_width_cm2.setValue(10)
        fill_color_cm2 = pg.ColorButton(color=(0, 195, 195))
        transparancy_cm2 = QtWidgets.QSpinBox()
        transparancy_cm2.setMinimum(0)
        transparancy_cm2.setMaximum(255)
        transparancy_cm2.setValue(200)
        style_cm2 = QtWidgets.QComboBox()
        for i in range(1, 12):
            style_cm2.addItem(QtGui.QIcon("pics/" + str(i) + ".png"), str(i))
        style_cm2.setCurrentIndex(7)

        line_color_cm3 = pg.ColorButton(color=(195, 0, 195))
        line_width_cm3 = QtWidgets.QSpinBox()
        line_width_cm3.setMinimum(0)
        line_width_cm3.setValue(10)
        fill_color_cm3 = pg.ColorButton(color=(195, 0, 195))
        transparancy_cm3 = QtWidgets.QSpinBox()
        transparancy_cm3.setMinimum(0)
        transparancy_cm3.setMaximum(255)
        transparancy_cm3.setValue(200)
        style_cm3 = QtWidgets.QComboBox()
        for i in range(1, 12):
            style_cm3.addItem(QtGui.QIcon("pics/" + str(i) + ".png"), str(i))
        style_cm3.setCurrentIndex(7)

        line_color_csi = pg.ColorButton(color=(0, 195, 0))
        line_width_csi = QtWidgets.QSpinBox()
        line_width_csi.setMinimum(0)
        line_width_csi.setValue(10)
        fill_color_csi = pg.ColorButton(color=(0, 195, 0))
        transparancy_csi = QtWidgets.QSpinBox()
        transparancy_csi.setMinimum(0)
        transparancy_csi.setMaximum(255)
        transparancy_csi.setValue(200)
        style_csi = QtWidgets.QComboBox()
        for i in range(1, 12):
            style_csi.addItem(QtGui.QIcon("pics/" + str(i) + ".png"), str(i))
        style_csi.setCurrentIndex(7)

        line_color_cne = pg.ColorButton(color=(200, 0, 65))
        line_width_cne = QtWidgets.QSpinBox()
        line_width_cne.setMinimum(0)
        line_width_cne.setValue(10)
        fill_color_cne = pg.ColorButton(color=(200, 0, 65))
        transparancy_cne = QtWidgets.QSpinBox()
        transparancy_cne.setMinimum(0)
        transparancy_cne.setMaximum(255)
        transparancy_cne.setValue(200)
        style_cne = QtWidgets.QComboBox()
        for i in range(1, 12):
            style_cne.addItem(QtGui.QIcon("pics/" + str(i) + ".png"), str(i))
        style_cne.setCurrentIndex(7)

        line_color_cnk = pg.ColorButton(color=(155, 0, 0))
        line_width_cnk = QtWidgets.QSpinBox()
        line_width_cnk.setMinimum(0)
        line_width_cnk.setValue(10)
        fill_color_cnk = pg.ColorButton(color=(155, 0, 0))
        transparancy_cnk = QtWidgets.QSpinBox()
        transparancy_cnk.setMinimum(0)
        transparancy_cnk.setMaximum(255)
        transparancy_cnk.setValue(200)
        style_cnk = QtWidgets.QComboBox()
        for i in range(1, 12):
            style_cnk.addItem(QtGui.QIcon("pics/" + str(i) + ".png"), str(i))
        style_cnk.setCurrentIndex(7)

        line_color_cpe = pg.ColorButton(color=(125, 0, 125))
        line_width_cpe = QtWidgets.QSpinBox()
        line_width_cpe.setMinimum(0)
        line_width_cpe.setValue(10)
        fill_color_cpe = pg.ColorButton(color=(125, 0, 125))
        transparancy_cpe = QtWidgets.QSpinBox()
        transparancy_cpe.setMinimum(0)
        transparancy_cpe.setMaximum(255)
        transparancy_cpe.setValue(200)
        style_cpe = QtWidgets.QComboBox()
        for i in range(1, 12):
            style_cpe.addItem(QtGui.QIcon("pics/" + str(i) + ".png"), str(i))
        style_cpe.setCurrentIndex(7)

        line_color_cpk = pg.ColorButton(color=(65, 0, 125))
        line_width_cpk = QtWidgets.QSpinBox()
        line_width_cpk.setMinimum(0)
        line_width_cpk.setValue(10)
        fill_color_cpk = pg.ColorButton(color=(65, 0, 125))
        transparancy_cpk = QtWidgets.QSpinBox()
        transparancy_cpk.setMinimum(0)
        transparancy_cpk.setMaximum(255)
        transparancy_cpk.setValue(200)
        style_cpk = QtWidgets.QComboBox()
        for i in range(1, 12):
            style_cpk.addItem(QtGui.QIcon("pics/" + str(i) + ".png"), str(i))
        style_cpk.setCurrentIndex(7)


        self.treeViewOptions.addTopLevelItem(_all)
        _all.addChildren([kn, kp, n, p, na, pa, sn, sp, si, m1, m2, m3, cpa, cna, cm1, cm2, csi, cne, cpe])
        self.treeViewOptions.setItemWidget(_all, 6, background_color)

        self.treeViewOptions.setItemWidget(kn, 1, line_color_kn)
        self.treeViewOptions.setItemWidget(kn, 2, line_width_kn)
        self.treeViewOptions.setItemWidget(kn, 3, fill_color_kn)
        self.treeViewOptions.setItemWidget(kn, 4, transparancy_kn)
        self.treeViewOptions.setItemWidget(kn, 5, style_kn)

        self.treeViewOptions.setItemWidget(kp, 1, line_color_kp)
        self.treeViewOptions.setItemWidget(kp, 2, line_width_kp)
        self.treeViewOptions.setItemWidget(kp, 3, fill_color_kp)
        self.treeViewOptions.setItemWidget(kp, 4, transparancy_kp)
        self.treeViewOptions.setItemWidget(kp, 5, style_kp)

        self.treeViewOptions.setItemWidget(n, 1, line_color_n)
        self.treeViewOptions.setItemWidget(n, 2, line_width_n)
        self.treeViewOptions.setItemWidget(n, 3, fill_color_n)
        self.treeViewOptions.setItemWidget(n, 4, transparancy_n)
        self.treeViewOptions.setItemWidget(n, 5, style_n)

        self.treeViewOptions.setItemWidget(p, 1, line_color_p)
        self.treeViewOptions.setItemWidget(p, 2, line_width_p)
        self.treeViewOptions.setItemWidget(p, 3, fill_color_p)
        self.treeViewOptions.setItemWidget(p, 4, transparancy_p)
        self.treeViewOptions.setItemWidget(p, 5, style_p)

        self.treeViewOptions.setItemWidget(na, 1, line_color_na)
        self.treeViewOptions.setItemWidget(na, 2, line_width_na)
        self.treeViewOptions.setItemWidget(na, 3, fill_color_na)
        self.treeViewOptions.setItemWidget(na, 4, transparancy_na)
        self.treeViewOptions.setItemWidget(na, 5, style_na)

        self.treeViewOptions.setItemWidget(pa, 1, line_color_pa)
        self.treeViewOptions.setItemWidget(pa, 2, line_width_pa)
        self.treeViewOptions.setItemWidget(pa, 3, fill_color_pa)
        self.treeViewOptions.setItemWidget(pa, 4, transparancy_pa)
        self.treeViewOptions.setItemWidget(pa, 5, style_pa)

        self.treeViewOptions.setItemWidget(sn, 1, line_color_sn)
        self.treeViewOptions.setItemWidget(sn, 2, line_width_sn)
        self.treeViewOptions.setItemWidget(sn, 3, fill_color_sn)
        self.treeViewOptions.setItemWidget(sn, 4, transparancy_sn)
        self.treeViewOptions.setItemWidget(sn, 5, style_sn)

        self.treeViewOptions.setItemWidget(sp, 1, line_color_sp)
        self.treeViewOptions.setItemWidget(sp, 2, line_width_sp)
        self.treeViewOptions.setItemWidget(sp, 3, fill_color_sp)
        self.treeViewOptions.setItemWidget(sp, 4, transparancy_sp)
        self.treeViewOptions.setItemWidget(sp, 5, style_sp)

        self.treeViewOptions.setItemWidget(si, 1, line_color_si)
        self.treeViewOptions.setItemWidget(si, 2, line_width_si)
        self.treeViewOptions.setItemWidget(si, 3, fill_color_si)
        self.treeViewOptions.setItemWidget(si, 4, transparancy_si)
        self.treeViewOptions.setItemWidget(si, 5, style_si)

        self.treeViewOptions.setItemWidget(m1, 1, line_color_m1)
        self.treeViewOptions.setItemWidget(m1, 2, line_width_m1)
        self.treeViewOptions.setItemWidget(m1, 3, fill_color_m1)
        self.treeViewOptions.setItemWidget(m1, 4, transparancy_m1)
        self.treeViewOptions.setItemWidget(m1, 5, style_m1)

        self.treeViewOptions.setItemWidget(m2, 1, line_color_m2)
        self.treeViewOptions.setItemWidget(m2, 2, line_width_m2)
        self.treeViewOptions.setItemWidget(m2, 3, fill_color_m2)
        self.treeViewOptions.setItemWidget(m2, 4, transparancy_m2)
        self.treeViewOptions.setItemWidget(m2, 5, style_m2)

        self.treeViewOptions.setItemWidget(m3, 1, line_color_m3)
        self.treeViewOptions.setItemWidget(m3, 2, line_width_m3)
        self.treeViewOptions.setItemWidget(m3, 3, fill_color_m3)
        self.treeViewOptions.setItemWidget(m3, 4, transparancy_m3)
        self.treeViewOptions.setItemWidget(m3, 5, style_m3)

        self.treeViewOptions.setItemWidget(cpa, 1, line_color_cpa)
        self.treeViewOptions.setItemWidget(cpa, 2, line_width_cpa)
        self.treeViewOptions.setItemWidget(cpa, 3, fill_color_cpa)
        self.treeViewOptions.setItemWidget(cpa, 4, transparancy_cpa)
        self.treeViewOptions.setItemWidget(cpa, 5, style_cpa)

        self.treeViewOptions.setItemWidget(cna, 1, line_color_cna)
        self.treeViewOptions.setItemWidget(cna, 2, line_width_cna)
        self.treeViewOptions.setItemWidget(cna, 3, fill_color_cna)
        self.treeViewOptions.setItemWidget(cna, 4, transparancy_cna)
        self.treeViewOptions.setItemWidget(cna, 5, style_cna)

        self.treeViewOptions.setItemWidget(cm1, 1, line_color_cm1)
        self.treeViewOptions.setItemWidget(cm1, 2, line_width_cm1)
        self.treeViewOptions.setItemWidget(cm1, 3, fill_color_cm1)
        self.treeViewOptions.setItemWidget(cm1, 4, transparancy_cm1)
        self.treeViewOptions.setItemWidget(cm1, 5, style_cm1)

        self.treeViewOptions.setItemWidget(cm2, 1, line_color_cm2)
        self.treeViewOptions.setItemWidget(cm2, 2, line_width_cm2)
        self.treeViewOptions.setItemWidget(cm2, 3, fill_color_cm2)
        self.treeViewOptions.setItemWidget(cm2, 4, transparancy_cm2)
        self.treeViewOptions.setItemWidget(cm2, 5, style_cm2)

        self.treeViewOptions.setItemWidget(cm3, 1, line_color_cm3)
        self.treeViewOptions.setItemWidget(cm3, 2, line_width_cm3)
        self.treeViewOptions.setItemWidget(cm3, 3, fill_color_cm3)
        self.treeViewOptions.setItemWidget(cm3, 4, transparancy_cm3)
        self.treeViewOptions.setItemWidget(cm3, 5, style_cm3)

        self.treeViewOptions.setItemWidget(csi, 1, line_color_csi)
        self.treeViewOptions.setItemWidget(csi, 2, line_width_csi)
        self.treeViewOptions.setItemWidget(csi, 3, fill_color_csi)
        self.treeViewOptions.setItemWidget(csi, 4, transparancy_csi)
        self.treeViewOptions.setItemWidget(csi, 5, style_csi)

        self.treeViewOptions.setItemWidget(cne, 1, line_color_cne)
        self.treeViewOptions.setItemWidget(cne, 2, line_width_cne)
        self.treeViewOptions.setItemWidget(cne, 3, fill_color_cne)
        self.treeViewOptions.setItemWidget(cne, 4, transparancy_cne)
        self.treeViewOptions.setItemWidget(cne, 5, style_cne)

        self.treeViewOptions.setItemWidget(cnk, 1, line_color_cnk)
        self.treeViewOptions.setItemWidget(cnk, 2, line_width_cnk)
        self.treeViewOptions.setItemWidget(cnk, 3, fill_color_cnk)
        self.treeViewOptions.setItemWidget(cnk, 4, transparancy_cnk)
        self.treeViewOptions.setItemWidget(cnk, 5, style_cnk)

        self.treeViewOptions.setItemWidget(cpk, 1, line_color_cpk)
        self.treeViewOptions.setItemWidget(cpk, 2, line_width_cpk)
        self.treeViewOptions.setItemWidget(cpk, 3, fill_color_cpk)
        self.treeViewOptions.setItemWidget(cpk, 4, transparancy_cpk)
        self.treeViewOptions.setItemWidget(cpk, 5, style_cpk)

        self.treeViewOptions.setItemWidget(cpe, 1, line_color_cpe)
        self.treeViewOptions.setItemWidget(cpe, 2, line_width_cpe)
        self.treeViewOptions.setItemWidget(cpe, 3, fill_color_cpe)
        self.treeViewOptions.setItemWidget(cpe, 4, transparancy_cpe)
        self.treeViewOptions.setItemWidget(cpe, 5, style_cpe)

    def file_parser(self):
        self.option_default_filling()

        DS_key = 0
        L_key = 0

        with open(self.path, "r") as file:

            x_max = -99999999
            x_min = 99999999
            y_max = -99999999
            y_min = 99999999
            switch = True

            for line in file:
                if line[0] == "L" and line[2] != "B":
                    child = QtGui.QStandardItem(line[2:line.find(';')] + "_" + str(counter))
                    child.setEditable(False)
                    self.L[DS_key - 1].append([line[2:line.find(';')] + "_" + str(counter), L_key])
                    L_key += 1

                elif line[0] == "P":
                    counter += 1
                    self.P.append([int(line[2:line[2:].find(" ") + 3])])
                    coord = ""
                    i = line[2:].find(" ") + 3
                    while line[i] != ';':
                        if line[i] != " ":
                            coord = coord + line[i]
                        else:
                            self.P[L_key - 1].append(int(coord))
                            if switch:
                                if int(coord) > y_max: y_max = int(coord)
                                if int(coord) < y_min: y_min = int(coord)
                            else:
                                if int(coord) > x_max: x_max = int(coord)
                                if int(coord) < x_min: x_min = int(coord)
                            switch = not switch
                            coord = ""
                        i += 1
                    self.P[L_key - 1].append(int(coord))
                    child.setToolTip(str(self.P[L_key - 1]))
                    parent.appendRow(child)
                elif line[0:2] == "DS":
                    counter = 0
                    parent = QtGui.QStandardItem(line[3:line.find(";")])
                    parent.setEditable(False)
                    self.rootNode.appendRow(parent)
                    self.DS.append([line[3:line[3:].find(" ") + 3], DS_key])
                    DS_key += 1
                    self.L.append([])
                elif line[0] == "W":
                    coord = ""
                    i = 4
                    while line[i] != ';':
                        if line[i] != " ":
                            coord = coord + line[i]
                        else:
                            self.bounds.append(int(coord))
                            coord = ""
                        i += 1
                    self.bounds.append(int(coord))

        self.DS.sort()
        if len(self.bounds) == 0:
            self.bounds = [x_min, y_min, x_max, y_min, x_max, y_max, x_min, y_max]
        self.bounds = elemoperations.elem_to_points(self.bounds)
        self.bounds = elemoperations.delete_repeating_points(self.bounds)
        self.bounds = elemoperations.form_element(self.bounds)
        child = QtGui.QStandardItem("bounds")
        child.setEditable(False)
        child.setToolTip(str(self.bounds))
        parent.appendRow(child)
        print("bounds", self.bounds)

        for i in range(len(self.L)):
            self.L[i].sort()

        # self.L.sort()
        print("!!!!!!DS: ", self.DS)
        print("!!!!!!L: ", self.L)
        print("!!!!!!P: ", self.P)

    def get_selection(self):
        for item in self.treeView.selectedIndexes():
            if item.parent().data() is not None:
                self.textBox.insertPlainText(
                    item.parent().data()[:item.parent().data().find(" ")] + "_" + item.data() + "+")
            else:
                i = 0
                while item.model().index(i, 0, item).isValid():
                    self.textBox.insertPlainText(
                        item.data()[:item.data().find(" ")] + "_" + item.model().index(i, 0, item).data() + "+")
                    i += 1

        # QtWidgets.QPlainTextEdit.keyPressEvent(self.textBox, e.key())

    def form_options(self):
        options_list = []
        top_level_items = self.treeViewOptions.topLevelItems()
        # print(self.treeViewOptions.itemWidget(top_level_items[0].child(1), 1).color().red())
        # print(self.treeViewOptions.itemWidget(top_level_items[0].child(1), 1).color().green())
        # print(self.treeViewOptions.itemWidget(top_level_items[0].child(1), 1).color().blue())

        options_list.append(self.treeViewOptions.itemWidget(top_level_items[0], 6).color())
        options_list.append([])
        for i in range(top_level_items[0].childCount()):
            options_list[1].append([])
            options_list[1][i].append(top_level_items[0].child(i).data(0, 0))
            options_list[1][i].append(self.treeViewOptions.itemWidget(top_level_items[0].child(i), 1).color())
            options_list[1][i].append(self.treeViewOptions.itemWidget(top_level_items[0].child(i), 2).value())
            options_list[1][i].append(self.treeViewOptions.itemWidget(top_level_items[0].child(i), 3).color())
            options_list[1][i].append(self.treeViewOptions.itemWidget(top_level_items[0].child(i), 4).value())
            options_list[1][i].append(self.treeViewOptions.itemWidget(top_level_items[0].child(i), 5).currentIndex())

        for j in range(1, len(top_level_items)):
            options_list.append([])
            options_list[j + 1].append(self.treeViewOptions.itemWidget(top_level_items[j], 3).color())
            options_list[j + 1].append(self.treeViewOptions.itemWidget(top_level_items[j], 4).value())
            options_list[j + 1].append(self.treeViewOptions.itemWidget(top_level_items[j], 5).currentIndex())
        # print("option_list: ", options_list)
        return options_list

    def input_expressions(self, text):
        text = text + "\n"
        row = ""
        ans = []
        self.count += 1
        for symb in text:
            if symb == "\n":
                if len(row) != 0:
                    ans.append(self.set_checker(row))
                row = ""
            else:
                row = row + symb
        options = self.form_options()
        self.graph_window(self.count, ans, options, self.bounds)

    def set_checker(self, string: str) -> list:
        string = string.replace(' ', '')
        if string[-1] in "+-*":
            string = string[:-1]
        string = '(' + string + ')'

        left_pointer = 0
        word = ""
        substring = ""
        symb = 0
        while symb != len(string):
            if string[symb] not in "*-+()":
                word += string[symb]
                # print("w", word)
            else:
                if len(word) > 0:
                    # print(word)
                    if word.find('_') != -1:
                        name_of_DS = word[:word.find('_')]
                        if word[word.find('_') + 1:].find('_') == -1:
                            substring = ""
                            name_of_set = word[word.find('_') + 1:]
                            num_of_DS = binarySearch(self.DS, name_of_DS)
                            for i in range(0, len(self.L[num_of_DS])):
                                if name_of_set == self.L[num_of_DS][i][0][:self.L[num_of_DS][i][0].find("_")]:
                                    print("name_of_set and L", name_of_set, self.L[num_of_DS][i][0])
                                    substring = substring + name_of_DS + "_" + self.L[num_of_DS][i][0] + "+"
                            if len(substring) > 0:
                                substring = "(" + substring[:len(substring) - 1] + ")"
                        else:
                            word = ""
                            symb += 1
                    else:
                        substring = ""
                        if word != "bounds":
                            for i in range(0, len(self.DS)):
                                for j in range(0, len(self.L[self.DS[i][1]])):
                                    if word == self.L[self.DS[i][1]][j][0][:self.L[self.DS[i][1]][j][0].find("_")]:
                                        # print("word and L", word, self.L[self.DS[i][1]][j][0])
                                        substring = substring + self.DS[i][0] + "_" + self.L[self.DS[i][1]][j][0] + "+"
                            if len(substring) > 0:
                                substring = "(" + substring[:len(substring) - 1] + ")"
                        else:
                            substring = ""
                            word = ""
                            symb += 1

                    # print("string", string)
                    string = string[:left_pointer + 1] + substring + string[left_pointer + 1 + len(word):]
                    symb = symb + len(substring) - len(word) - 2
                left_pointer = symb
                word = ""
            symb += 1
        print("str", string)

        result = self.expression_parser(string)
        result = [acts for acts in result]
        print("res", result)
        for i in range(0, len(result)):
            result[i] = elemoperations.points_to_elem(result[i])

        return result

    def expression_parser(self, string: str) -> list:
        op = {'*': 2, '-': 2, '+': 1, '(': 0}
        acts = []

        def operations():
            sign = stack_op.pop()
            if stack_elems[-1] == 0:
                stack_elems.pop()
                # print("elem2___", acts[-1])
                elem2 = acts.pop()
            else:
                elem_name = stack_elems.pop()
                # print("elem2___", elem_name)
                if elem_name != "bounds":
                    num_of_DS = binarySearch(self.DS, elem_name[:elem_name.find('_')])
                    num_of_L = binarySearch(self.L[num_of_DS], elem_name[elem_name.find('_') + 1:])
                    elem2 = self.P[num_of_L]
                else:
                    elem2 = self.bounds

            if stack_elems[-1] == 0:
                stack_elems.pop()
                # print("elem1___", acts[-1])
                elem1 = acts.pop()
            else:
                elem_name = stack_elems.pop()
                # print("elem1___", elem_name)
                if elem_name != "bounds":
                    num_of_DS = binarySearch(self.DS, elem_name[:elem_name.find('_')])
                    num_of_L = binarySearch(self.L[num_of_DS], elem_name[elem_name.find('_') + 1:])
                    elem1 = self.P[num_of_L]
                else:
                    elem1 = self.bounds
            self.counter += 1

            if sign == "*":
                acts.append(conjunction.conj(elem1, elem2))
            elif sign == "+":
                acts.append(disjunction.disj(elem1, elem2))
            elif sign == "-":
                acts.append(substraction.substr(elem1, elem2))
            """else:
                acts.append(multioperation(elem1, elem2))"""
            # print("ACTS: ", acts)
            stack_elems.append(0)

        stack_elems = []
        stack_op = []
        for symb in string:
            if symb not in '*-+()':
                elem += symb
            else:
                if symb == ')':
                    if elem:
                        stack_elems.append(elem)
                    while stack_op[-1] != '(':
                        operations()
                    stack_op.pop()
                elif symb == '(':
                    stack_op.append('(')
                else:
                    if elem: stack_elems.append(elem)
                    if op[stack_op[-1]] > op[symb]:
                        operations()
                    stack_op.append(symb)
                elem = ''
            # print("ERROR")
        # print(acts)

        return acts[0]

    def graph_window(self, string, ans, options, bounds):
        pattern = Ui_DrawPattern(self.path, ans, options, bounds)
        win = QtWidgets.QWidget()
        print("COUNTERRRERERERER", self.counter)
        pattern.setupUi(win)
        pattern.screen()

        self.tabWidget.addTab(win, str(string))
